#   mybatisPlus 性能分析差价开关
performance:
  enable: false
server:
  port: 8099
spring:
  datasource:
    dynamic:
      datasource:
        system:
          url: jdbc:mysql://192.168.1.172:3306/mybatis?useUnicode=true&characterEncoding=UTF-8
          username: root
          password: yuanchengmysql
          driver-class-name: com.mysql.jdbc.Driver
          type: com.alibaba.druid.pool.DruidDataSource
        service:
          url: jdbc:mysql://192.168.1.172:3306/mybatie_2?useUnicode=true&characterEncoding=UTF-8
          username: root
          password: yuanchengmysql
          driver-class-name: com.mysql.jdbc.Driver
          type: com.alibaba.druid.pool.DruidDataSource
      primary: system
#     是否开启对mybatisPlus的支持，默认为false，不要随便开启，有微小的性能损失，开启后使用mp的内置方法即可注解在类上统一切换数据源，
      mp-enabled: true
    druid:
#     配置druid web页面账号密码
#      stat-view-servlet:
#        loginUsername: admin
#        loginPassword: 123456
#     用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validationQuery: SELECT 1
#      单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
#      validationQueryTimeout: 60
#      初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initialSize: 10
#      最大连接池数量
      maxActive: 200
#      最小连接池数量
      minIdle: 10
#      获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      max-wait: 60000
#      连接保持空闲而不被驱逐的最小时间
      min-evictable-idle-time-millis: 180000
#      max-evictable-idle-time-millis: 180000
#      申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      testOnBorrow: false
#      归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false
#     建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
#      有两个含义：
#      1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 单位毫秒
#      2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000
#      是否共享 prepared 语句，也就是是否两次请求相同的语句而不会关闭对相同底层 prepared 语句的使用。
      share-prepared-statements: true
      filters: stat,wall,log4j
#      打开PSCache，并且指定每个连接上PSCache的大小,PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
#      poolPreparedStatements: true
#      maxOpenPreparedStatements: 100





